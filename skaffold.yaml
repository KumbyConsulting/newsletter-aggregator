# skaffold.yaml - Defines how Cloud Deploy renders and deploys the backend service

apiVersion: skaffold/v4beta7 # Use a recent Skaffold version compatible with Cloud Run features
kind: Config
metadata:
  name: newsletter-aggregator-backend
# Define deployment configurations
deploy:
  cloudrun: {} # Indicates deployment to Cloud Run, specifics are in the manifests

# Define the manifests (service definitions) to deploy
manifests:
  # Use kustomize-style patching for overlays per profile
  # Raw YAML manifests can also be used, but patching is flexible for env differences
  rawYaml:
    - cloudrun-service.yaml # The base Cloud Run service definition

# Define how artifacts are built or provided.
# In Cloud Deploy, the image is built by Cloud Build and provided.
build:
  # Reference the image built by Cloud Build and passed by Cloud Deploy
  # The name 'newsletter-aggregator' must match the image name key used in the
  # `gcloud deploy releases create --images` command in cloudbuild.yaml
  artifacts:
    - image: newsletter-aggregator # Logical name matching the Cloud Deploy release image key
      # No build config needed here; Cloud Deploy injects the built image GCR path.

# Define profiles for different environments (staging, production)
profiles:
  # Staging environment profile
  - name: staging
    # Patches applied to the base manifests (cloudrun-service.yaml) for staging
    patches:
      - op: replace # Example: Set FLASK_ENV for staging
        # Ensure this path matches an existing env var in cloudrun-service.yaml
        path: /spec/template/spec/containers/0/env/0/value
        value: "development" # Or 'staging'
      - op: replace # Example: Use a staging GCS bucket if different
        # Ensure this path matches an existing env var in cloudrun-service.yaml
        path: /spec/template/spec/containers/0/env/1/value
        value: "newsletter-aggregator-staging" # Assumed staging bucket name
      # Add other patches for staging-specific settings (e.g., lower resources, different secrets)
      # Example patch for resource limits (if defined in base yaml):
      # - op: replace
      #   path: /spec/template/spec/containers/0/resources/limits/cpu
      #   value: "1" # Lower CPU for staging
      # - op: replace
      #   path: /spec/template/spec/containers/0/resources/limits/memory
      #   value: "2Gi" # Lower Memory for staging
    manifests:
      rawYaml:
        - cloudrun-service.yaml # Apply patches to this file

  # Production environment profile
  - name: production
    # Patches applied to the base manifests (cloudrun-service.yaml) for production
    patches:
      - op: replace # Set FLASK_ENV for production
        # Ensure this path matches an existing env var in cloudrun-service.yaml
        path: /spec/template/spec/containers/0/env/0/value
        value: "production"
      - op: replace # Use production GCS bucket
        # Ensure this path matches an existing env var in cloudrun-service.yaml
        path: /spec/template/spec/containers/0/env/1/value
        value: "newsletter-aggregator" # Assumed production bucket name from original config
      # Ensure production resources match your original deployment if needed
      # - op: replace
      #   path: /spec/template/spec/containers/0/resources/limits/cpu
      #   value: "2"
      # - op: replace
      #   path: /spec/template/spec/containers/0/resources/limits/memory
      #   value: "4Gi"
    manifests:
      rawYaml:
        - cloudrun-service.yaml # Apply patches to this file

# Deploy Hooks for API Gateway update (Requires Skaffold v2.0+)
hooks:
  postdeploy:
    - host: # Run commands locally (in the Cloud Build execution environment used by Cloud Deploy)
        command: ["bash", "-c"]
        args:
          - |
            set -e # Exit immediately if a command exits with a non-zero status.
            echo "Running post-deploy hook to update API Gateway..."

            # Define variables
            API_NAME="newsletter-aggregator-api"
            GATEWAY_NAME="newsletter-aggregator-gateway"
            PROJECT_ID="newsletter-450510" # Assuming same project for now
            REGION="us-central1"
            OPENAPI_SPEC="openapi.yaml"
            SERVICE_ACCOUNT="newsletter-aggregator-sa@${PROJECT_ID}.iam.gserviceaccount.com"

            # --- Check if openapi.yaml exists --- #
            if [ ! -f "${OPENAPI_SPEC}" ]; then
              echo "Error: ${OPENAPI_SPEC} not found. Cannot update API Gateway config." >&2
              # Decide if this is a fatal error for the deployment
              # exit 1 # Uncomment to fail the deployment if spec is missing
              echo "Skipping API Gateway update because ${OPENAPI_SPEC} is missing."
              exit 0 # Exiting 0 to not fail the overall deployment for now
            fi

            # --- Prepare OpenAPI Spec (Optional: if needs project substitution) ---
            # If your openapi.yaml still uses placeholders like SERVICE_PROJECT_NUMBER
            # uncomment and adapt this section.
            # echo "Updating ${OPENAPI_SPEC} with project details..."
            # PROJECT_NUMBER=$(gcloud projects describe ${PROJECT_ID} --format="value(projectNumber)")
            # sed -i "s/SERVICE_PROJECT_NUMBER/${PROJECT_NUMBER}/g" ${OPENAPI_SPEC}
            # sed -i "s/newsletter-aggregator-857170198287/newsletter-aggregator-${PROJECT_ID}/g" ${OPENAPI_SPEC}

            # --- Create new API config with incremented version --- #
            echo "Fetching latest API config version..."
            LATEST_VERSION_NAME=$(gcloud api-gateway api-configs list --api=${API_NAME} --project=${PROJECT_ID} --sort-by=~createTime --limit=1 --format="value(name)")

            if [ -z "${LATEST_VERSION_NAME}" ]; then
              echo "No existing API configs found for ${API_NAME}. Starting with v1."
              NEW_VERSION=1
            else
              # Extract version number (assumes format like .../configs/name-v<NUMBER>)
              LATEST_VERSION=$(echo "${LATEST_VERSION_NAME}" | grep -o 'v[0-9]\+$' | sed 's/v//')
              if ! [[ "${LATEST_VERSION}" =~ ^[0-9]+$ ]]; then
                echo "Error: Could not extract version number from latest config name: ${LATEST_VERSION_NAME}" >&2
                exit 1
              fi
              NEW_VERSION=$((LATEST_VERSION + 1))
            fi

            NEW_CONFIG_ID="newsletter-aggregator-config-v${NEW_VERSION}"
            echo "Creating new API config version: ${NEW_CONFIG_ID}"

            if ! gcloud api-gateway api-configs create "${NEW_CONFIG_ID}" \
              --api=${API_NAME} \
              --openapi-spec=${OPENAPI_SPEC} \
              --project=${PROJECT_ID} \
              --backend-auth-service-account=${SERVICE_ACCOUNT}; then
              echo "Error: API config creation failed for ${NEW_CONFIG_ID}" >&2
              exit 1 # Fail the deployment if config creation fails
            fi
            echo "API configuration ${NEW_CONFIG_ID} created successfully."

            # --- Update the gateway to use the new config --- #
            echo "Updating API Gateway ${GATEWAY_NAME} to use config ${NEW_CONFIG_ID}..."
            if ! gcloud api-gateway gateways update ${GATEWAY_NAME} \
              --api=${API_NAME} \
              --api-config=${NEW_CONFIG_ID} \
              --location=${REGION} \
              --project=${PROJECT_ID}; then
              echo "Error: API Gateway update failed." >&2
              exit 1 # Fail the deployment if gateway update fails
            fi

            echo "API Gateway ${GATEWAY_NAME} updated successfully."
            echo "Post-deploy hook finished." 